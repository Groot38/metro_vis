import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px


#d√©penses dans domaine environnement
# type dep T2 ; 
@st.cache_data
def load_data_energie():
    file_path_gaz = "../data/environnement/elec/conso-gaz-metropole.csv"
    file_path_elec = "../data/environnement/elec/eco2mix-metropoles-tr.csv"
    gaz = pd.read_csv(file_path_gaz,sep = ";")
    elec = pd.read_csv(file_path_elec,sep = ";")
    file_path_elec_bat = "../data/environnement/elec/consommation_elec_grenoble_2012_2022.csv"
    elec_bat = pd.read_csv(file_path_elec_bat, sep=",")
    file_path_elec_tot = "../data/environnement/elec/consommation-annuelle-d-electricite-et-gaz-par-commune(1).csv"
    elec_tot = pd.read_csv(file_path_elec_tot, sep=";")
    return(gaz,elec,elec_bat,elec_tot)

gaz,elec,elec_bat,elec_tot = load_data_energie()

gaz["Date"] = pd.to_datetime(gaz["Date"], format="%Y-%m")
elec["Date"] = pd.to_datetime(elec["Date"], format="%Y-%m-%d")

######################################################################
st.title("Evolution de la consommation de Gaz")

st.line_chart(gaz,x="Date", y= "Consommation de gaz (en KWh PCS 0¬∞C)")

#####################################################################

st.title("Evolution de la consommation d'Electricit√©")

# Extraire l'ann√©e et le mois pour regrouper les donn√©es
elec["Ann√©e-Mois"] = elec["Date"].dt.to_period("M")

# Calculer la moyenne par mois
elec_mensuel = elec.groupby("Ann√©e-Mois")["Consommation (MW)"].mean().reset_index()

elec_mensuel["Ann√©e-Mois"] = elec_mensuel["Ann√©e-Mois"].dt.to_timestamp()


# Graphique
st.line_chart(elec_mensuel, x="Ann√©e-Mois", y="Consommation (MW)")

#############################################################################

# üìÜ Convertir la colonne date_releve en datetime
elec_bat["date_releve"] = pd.to_datetime(elec_bat["date_releve"])

# üìÖ Extraire ann√©e uniquement
elec_bat["Ann√©e"] = elec_bat["date_releve"].dt.to_period("Y")

# üî¢ Convertir la colonne "quantite_kwh" en float
elec_bat["quantite_kwh"] = pd.to_numeric(elec_bat["quantite_kwh"], errors="coerce")

# üìä Calcul de la moyenne annuelle par cat√©gorie
elec_annuel_bat = elec_bat.groupby(["Ann√©e", "libelle_niv__4"])["quantite_kwh"].mean().reset_index()

# üîÑ Convertir Ann√©e en datetime pour Plotly
elec_annuel_bat["Ann√©e"] = elec_annuel_bat["Ann√©e"].dt.to_timestamp()

col1, col2  = st.columns([1,4],vertical_alignment="center")

with col1 : 
    # üéõÔ∏è S√©lecteur pour choisir UNE SEULE cat√©gorie √† afficher
    libelles_disponibles = elec_annuel_bat["libelle_niv__4"].unique()
    libelle_selectionne = st.selectbox("S√©lectionnez une cat√©gorie √† afficher :", "ECLAIRAGE PUBLIC")

# üìå Filtrer les donn√©es selon la cat√©gorie choisie
elec_filtr√© = elec_annuel_bat[elec_annuel_bat["libelle_niv__4"] == libelle_selectionne]

with col2 :
    # üìä Cr√©er un bar chart avec la cat√©gorie s√©lectionn√©e
    fig = px.line(
        elec_filtr√©, 
        x="Ann√©e", 
        y="quantite_kwh",  
        title=f"Consommation annuelle d'√©lectricit√© - {libelle_selectionne}",
        color_discrete_sequence=["#3498db"]  # Bleu pour un style √©pur√©
    )

    # üìà Afficher dans Streamlit
    st.plotly_chart(fig)


########################################################################################

col3, col4  = st.columns([1,4],vertical_alignment="center")


with col3 :
    # üéõÔ∏è S√©lecteur pour choisir les secteurs √† afficher
    secteurs_disponibles = elec_tot["FILIERE"].unique()
    secteur_selectionn√© = st.selectbox("S√©lectionnez un secteur :", secteurs_disponibles)
# üìå Filtrer les donn√©es selon le secteur s√©lectionn√©
elec_tot_filtr√© = elec_tot[(elec_tot["FILIERE"] == secteur_selectionn√©)]
elec_tot_filtr√© = elec_tot_filtr√©.groupby(['CODE GRAND SECTEUR','Ann√©e']).sum(numeric_only=True).reset_index()
#melted_group_data = melted_data.groupby(['LIB_VAR_LONG',"LIB_V"]).sum(numeric_only=True).reset_index()
with col4 :
    # üìä Cr√©ation du barplot empil√©
    fig = px.bar(
        elec_tot_filtr√©, 
        x="Ann√©e", 
        y="Conso totale (MWh)",  
        color="CODE GRAND SECTEUR",  # FILIERE sera empil√©
        barmode="stack",  # Empilement des fili√®res
        title=f"Consommation par ann√©e pour {secteur_selectionn√©}"
    )

    # üìà Affichage dans Streamlit
    st.plotly_chart(fig)

col11, col12, col13,col14  = st.columns([1,1,1,1],vertical_alignment="center")

with col11 :
    with st.expander("Industrie"):
                st.write('''
                    Le secteur industriel comprend les activit√©s √©conomiques qui combinent des facteurs de production 
                    (installations, approvisionnements, travail, savoir) pour produire des biens mat√©riels destin√©s au march√©.
                    ''')
                
with col12 :
    with st.expander("Tertiaire"):
                st.write('''
                    Le secteur tertiaire recouvre un vaste champ d'activit√©s qui s'√©tend du commerce √† l'administration,
                    en passant par les transports, les activit√©s financi√®res et immobili√®res, 
                    les services aux entreprises et services aux particuliers, l'√©ducation, la sant√© et l'action sociale.
                    ''')
                
with col13 :
    with st.expander("R√©sidentiel"):
                st.write('''
                    Ce secteur d‚Äôutilisation de l‚Äô√©nergie consiste en des quartiers d‚Äôhabitation.
                    ''')

with col14 :
             
    with st.expander("Agriculture"):
                st.write('''
                    Ce secteur de l'√©conomie comprend les cultures, l'√©levage, la chasse, la p√™che et la sylviculture.
                    ''')


    #########################################################################

elec_annuel_tot = elec_tot[elec_tot["CODE GRAND SECTEUR"] == "RESIDENTIEL"]
elec_annuel_tot["Rapport par habitant"] = elec_annuel_tot["Conso totale (MWh)"]/elec_annuel_tot["Nombre d'habitants"]
elec_annuel_tot_commune = elec_annuel_tot.groupby(["Ann√©e", "Nom Commune"])["Rapport par habitant"].mean().reset_index()


elec_annuel_tot_commune_2023= elec_annuel_tot_commune[elec_annuel_tot_commune["Ann√©e"] == 2023]


fig = px.bar(
        elec_annuel_tot_commune_2023, 
        x="Nom Commune", 
        y="Rapport par habitant",  
        barmode="stack",  # Empilement des fili√®res
        title="Rapport consommation d'√©lectricit√©/hab en 2023"
        )


st.plotly_chart(fig.update_layout(xaxis={'categoryorder': 'total descending'}))


###################################################


@st.cache_data
def load_data_energie():
    file_path_2020 = "../data/environnement/elec/dido/Donnees-de-consommation-et-de-points-de-livraison-denergie-a-la-maille-commune-chaleur-e.2020-10.csv"
    file_path_2021 = "../data/environnement/elec/dido/Donnees-de-consommation-et-de-points-de-livraison-denergie-a-la-maille-commune-chaleur-e.2021-10.csv"
    file_path_2022 = "../data/environnement/elec/dido/Donnees-de-consommation-et-de-points-de-livraison-denergie-a-la-maille-commune-chaleur-e.2022-09.csv"
    file_path_2023 = "../data/environnement/elec/dido/Donnees-de-consommation-et-de-points-de-livraison-denergie-a-la-maille-commune-chaleur-e.2023-09.csv"

    df2020 = pd.read_csv(file_path_2020,sep = ";")
    df2021 = pd.read_csv(file_path_2021,sep = ";")
    df2022 = pd.read_csv(file_path_2022,sep = ";")
    df2023 = pd.read_csv(file_path_2023,sep = ";")

    return(df2020,df2021,df2022,df2023)

df2020,df2021,df2022,df2023 = load_data_energie()

codes_insee = [ # Pour limiter sur la m√©tropole
    "38057", "38059", "38071", "38068", "38111", "38126", "38150", "38151", 
    "38158", "38169", "38170", "38179", "38185", "38188", "38200", "38516", 
    "38187", "38317", "38471", "38229", "38235", "38258", "38252", "38271", 
    "38277", "38279", "38281", "38309", "38325", "38328", "38364", "38382", 
    "38388", "38421", "38423", "38436", "38445", "38472", "38474", "38478", 
    "38485", "38486", "38524", "38528", "38529", "38533", "38540", "38545", 
    "38562"
]

df2020bis = df2020.drop(df2020.index[[0]])
df2021bis = df2021.drop(df2020.index[[0]])
df2022bis = df2022.drop(df2020.index[[0]])
df2023bis = df2023.drop(df2020.index[[0]])

df2020GRE = df2020bis[df2020bis["Code g√©ographique du territoire - Code de la zone"].isin(codes_insee)]
df2020GRE.rename(columns={"Niveau de rejet de CO2 des r√©seaux (en kg/kWh)": "Niveau de rejet direct en CO2 des r√©seaux (en kg/kWh)"}, inplace=True)

df2021GRE = df2021bis[df2021bis["Code g√©ographique du territoire - Code de la zone"].isin(codes_insee)]
df2022GRE = df2022bis[df2022bis["Code.g√©ographique.du.territoire - Code de la zone"].isin(codes_insee)]
df2022GRE.rename(columns={"Code.g√©ographique.du.territoire - Code de la zone": "Code g√©ographique du territoire - Code de la zone"}, inplace=True)
df2022GRE.rename(columns={"Mill√©sime.des.donn√©es": "Mill√©sime des donn√©es"}, inplace=True)
df2022GRE.rename(columns={"Niveau.de.rejet.direct.en.CO2.des.r√©seaux..en.kg.kWh.": "Niveau de rejet direct en CO2 des r√©seaux (en kg/kWh)"}, inplace=True)


df2023GRE = df2023bis[df2023bis["Code.g√©ographique.du.territoire - Code de la zone"].isin(codes_insee)]
df2023GRE.rename(columns={"Code.g√©ographique.du.territoire - Code de la zone": "Code g√©ographique du territoire - Code de la zone"}, inplace=True)
df2023GRE.rename(columns={"Mill√©sime.des.donn√©es": "Mill√©sime des donn√©es"}, inplace=True)
df2023GRE.rename(columns={"Niveau.de.rejet.direct.en.CO2.des.r√©seaux..en.kg.kWh.": "Niveau de rejet direct en CO2 des r√©seaux (en kg/kWh)"}, inplace=True)

df2020_2023GRE = pd.concat([df2020GRE,df2021GRE,df2022GRE,df2023GRE], ignore_index=True)

col21, col22  = st.columns([1,3],vertical_alignment="center")

with col21 : 
    ann√©e_selectionn√©e = st.selectbox("S√©lectionnez une ann√©e", sorted(df2020_2023GRE["Mill√©sime des donn√©es"].unique(), reverse=True))
    op_selectionn√©_nom = st.selectbox("S√©lectionnez un op√©rateur", sorted(df2020_2023GRE["Op√©rateur"].unique(), reverse=True))


    # üéØ Filtrer le DataFrame pour r√©cup√©rer la valeur correspondante
    df_filtr√© = df2020_2023GRE[(df2020_2023GRE["Mill√©sime des donn√©es"] == ann√©e_selectionn√©e) & (df2020_2023GRE["Op√©rateur"] == op_selectionn√©_nom)]

    # üìä Afficher la m√©trique si des donn√©es existent
    if not df_filtr√©.empty:
        valeur_rejet = float(df_filtr√©["Niveau de rejet direct en CO2 des r√©seaux (en kg/kWh)"].values[0])
        st.metric(
            label=f"Rejet direct en CO2 des r√©seaux ({op_selectionn√©_nom} - {ann√©e_selectionn√©e})",
            value=f"{valeur_rejet:.4f} kg/kWh"
        )
    else:
        st.warning("Aucune donn√©e disponible pour cette s√©lection.")

######################################

with col22 :

    df2020_2023GRE["Mill√©sime des donn√©es"] = pd.to_numeric(df2020_2023GRE["Mill√©sime des donn√©es"], errors="coerce")


    # üìà Tracer la courbe d'√©volution des rejets en CO‚ÇÇ sur les ann√©es
    fig = px.line(
        df2020_2023GRE, 
        x="Mill√©sime des donn√©es", 
        y="Niveau de rejet direct en CO2 des r√©seaux (en kg/kWh)",
        color="Op√©rateur",
        markers=True,  # Ajouter des points sur la courbe
        title=f"√âvolution du rejet direct en CO‚ÇÇ",
        labels={"Mill√©sime des donn√©es": "Ann√©e", "Niveau de rejet direct en CO2 des r√©seaux (en kg/kWh)": "CO‚ÇÇ (kg/kWh)"},
    )

    # üìä Affichage dans Streamlit
    st.plotly_chart(fig)

###################################################################################
