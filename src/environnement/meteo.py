import streamlit as st
import pandas as pd
import plotly.express as px
import pydeck as pdk
import numpy as np



st.title("Analyse de la m√©t√©o de la M√©tropole de Grenoble")

@st.cache_data
def load_data_meteo():
    """
    Cette fonction renvoie les df sur la m√©teo , chaque df est sur une p√©riode de 5 ans.
    """
    file_path_vent_2000_2005 = "../data/environnement/meteo/clim-base_quot_vent-38-2000-2005.csv"
    file_path_vent_2005_2010 = "../data/environnement/meteo/clim-base_quot_vent-38-2005-2010.csv"
    file_path_vent_2010_2015 = "../data/environnement/meteo/clim-base_quot_vent-38-2010-2015.csv"
    file_path_vent_2015_2020 = "../data/environnement/meteo/clim-base_quot_vent-38-2015-2020.csv"
    file_path_vent_2020_2025 = "../data/environnement/meteo/clim-base_quot_vent-38-2020-2025.csv"

    file_path_autre_2000_2005 = "../data/environnement/meteo/clim-base_quot_autres-38-2000-2005.csv"
    file_path_autre_2005_2010 = "../data/environnement/meteo/clim-base_quot_autres-38-2005-2010.csv"
    file_path_autre_2010_2015 = "../data/environnement/meteo/clim-base_quot_autres-38-2010-2015.csv"
    file_path_autre_2015_2020 = "../data/environnement/meteo/clim-base_quot_autres-38-2015-2020.csv"
    file_path_autre_2020_2025 = "../data/environnement/meteo/clim-base_quot_autres-38-2020-2025.csv"

    df_2000_2005 = pd.read_csv(file_path_vent_2010_2015)
    df_2005_2010 = pd.read_csv(file_path_vent_2005_2010)
    df_2010_2015 = pd.read_csv(file_path_vent_2010_2015)
    df_2015_2020 = pd.read_csv(file_path_vent_2015_2020)
    df_2020_2025 = pd.read_csv(file_path_vent_2020_2025)

    df2_2000_2005 = pd.read_csv(file_path_vent_2000_2005)
    df2_2005_2010 = pd.read_csv(file_path_vent_2005_2010)
    df2_2010_2015 = pd.read_csv(file_path_autre_2010_2015)
    df2_2015_2020 = pd.read_csv(file_path_autre_2015_2020)
    df2_2020_2025 = pd.read_csv(file_path_autre_2020_2025)


    return(df_2000_2005,df_2005_2010,df_2010_2015,df_2015_2020,df_2020_2025,df2_2000_2005,df2_2005_2010,df2_2010_2015,df2_2015_2020,df2_2020_2025)

df_2000_2005,df_2005_2010,df_2010_2015,df_2015_2020,df_2020_2025,df2_2000_2005,df2_2005_2010,df2_2010_2015,df2_2015_2020,df2_2020_2025=load_data_meteo()
df = pd.concat([df_2000_2005,df_2005_2010,df_2010_2015, df_2015_2020,df_2020_2025], ignore_index=True)
df2 = pd.concat([df2_2000_2005,df2_2005_2010,df2_2010_2015, df2_2015_2020,df2_2020_2025], ignore_index=True)

# on convertit le format de date
df["aaaammjj"] = pd.to_datetime(df["aaaammjj"], format="%Y%m%d")
df2["aaaammjj"] = pd.to_datetime(df2["aaaammjj"], format="%Y%m%d")

#######################################################################################
st.subheader("Etude de temp√©ratures globales sur 20 ans.")

col1, col2  = st.columns([2,1],vertical_alignment="top")
df["Moyenne Glissante"] = df.groupby("nom_usuel")["tntxm"].transform(lambda x: x.rolling(window=100, min_periods=50).mean())
df = df.rename(columns={"tntxm": "Moyenne entre la temp√©rature min et max"})

with col1:
    st.line_chart(df, x="aaaammjj", y=["Moyenne entre la temp√©rature min et max", "Moyenne Glissante"], color="nom_usuel",x_label="Date",y_label="moyenne de temp√©ratures en ¬∞C")
    st.markdown(
            "<p style='text-align: left; color: gray; margin-top: -40px;'>"
            "Source : Donn√©es climatologique de base quotidiennes M√©t√©o France</p><br><br>",
            unsafe_allow_html=True
        )

#######################

# on change le format des dates
df["aaaammjj"] = pd.to_datetime(df["aaaammjj"])
df["Ann√©e"] = df["aaaammjj"].dt.year

# on fait la moyenne des temps par annee
df_annee = df.groupby("Ann√©e")["Moyenne entre la temp√©rature min et max"].mean().reset_index()

# on √©tablit une tendance avec numpy
pente, intercept = np.polyfit(df_annee["Ann√©e"], df_annee["Moyenne entre la temp√©rature min et max"], 1)


augmentation_temp = pente * (df_annee["Ann√©e"].max() - df_annee["Ann√©e"].min())

with col2:    
    st.metric(
        label="Augmentation de la temp√©rature sur la p√©riode",
        value=f"{augmentation_temp:.2f}¬∞C",
        delta=f"{pente:.2f}¬∞C/an",
        delta_color="inverse" if pente < 0 else "normal",
    )
    with st.expander("Infos"):
        st.write('''
            La tendance des temp√©ratures au cours des ann√©es est positive.   
            Les temp√©ratures augmentents en moyenne de :red[0.09 ¬∞C/an].  
            En 20 ans, la temp√©rature a augment√© de :red[1.73 ¬∞C].
             ''')


######################

st.subheader("Etude de temp√©ratures annuelles")

multi='''
            On observe mieux cette tendance en observant sur les moyennes annuelles.
             '''
st.markdown(multi)


# on ajoute la tendance au graph
df_annee["Tendance Lin√©aire"] = intercept + pente * df_annee["Ann√©e"]
fig = px.line(df_annee, x="Ann√©e", y=["Moyenne entre la temp√©rature min et max", "Tendance Lin√©aire"])

fig.update_layout(
    xaxis_title="Ann√©e",
    yaxis_title="Moyenne de temp√©rature annuelle (¬∞C)",
    yaxis=dict(
        range=[0, 20]
    )
)
st.plotly_chart(fig)
st.markdown(
            "<p style='text-align: left; color: gray; margin-top: -40px;'>"
            "Source : Donn√©es climatologique de base quotidiennes M√©t√©o France</p><br><br>",
            unsafe_allow_html=True
        )


############################################

df["ann√©e"] = df["aaaammjj"].dt.year
df2["ann√©e"] = df2["aaaammjj"].dt.year

df["mois"] = df["aaaammjj"].dt.month
df2["mois"] = df2["aaaammjj"].dt.month

# les 2 stations sur lesquelles on travail
stations_interessantes = ["GRENOBLE-CEA-RADOME", "ST-M-D'HERES-GALOCHERE"]
df_filtr√© = df[df["nom_usuel"].isin(stations_interessantes)]
df_filtr√© = df[~((df["nom_usuel"] == "GRENOBLE-CEA-RADOME") & (df["ann√©e"] == 2019))]

# temp√©rature moyenne par ann√©e et par station m√©t√©o
df_temp_annuelle = df_filtr√©.groupby(["ann√©e","nom_usuel"])["Moyenne entre la temp√©rature min et max"].mean().reset_index()

col1, col2  = st.columns([1,1],vertical_alignment="top")
with col1:
    with st.expander("Infos"):
        st.write('''
            Les donn√©es m√©t√©o sont prises √† partir de diff√©rents postes sur Grenoble. Certains postes ont √©t√©s mis en place plus tard.  
            Les temp√©ratures peuvent diff√©rer selon la localisation du poste (proche montagne, cours d'eau ou pleine ville).
             ''')
    
    st.write("Moyenne de temp√©rature par ann√©e et par station")
    st.bar_chart(df_temp_annuelle, x="ann√©e", y="Moyenne entre la temp√©rature min et max", color="nom_usuel", stack=False, y_label="moyenne de temp√©ratures en ¬∞C")
    st.markdown(
            "<p style='text-align: left; color: gray; margin-top: -40px;'>"
            "Source : Donn√©es climatologique de base quotidiennes M√©t√©o France</p><br><br>",
            unsafe_allow_html=True
        )


with col2:
    layer = pdk.Layer(
    "ScatterplotLayer",
    df_filtr√©,
    get_position=["lon", "lat"],
    get_radius=500,
    get_fill_color=[255, 0, 0, 140],
    pickable=True,
    auto_highlight=True,
    )

    # carte pydeck
    view_state = pdk.ViewState(latitude=df_filtr√©["lat"].mean(), longitude=df_filtr√©["lon"].mean(), zoom=9)
    # infobulle
    tooltip = {
        "html": "<b>Poste :</b> {nom_usuel}",
        "style": {"backgroundColor": "white", "color": "black"}
    }
    deck = pdk.Deck(layers=[layer], initial_view_state=view_state, tooltip=tooltip)

    st.pydeck_chart(deck)
    st.markdown(
            "<p style='text-align: left; color: gray; margin-top: -40px;'>"
            "Source : Donn√©es climatologique de base quotidiennes M√©t√©o France</p><br><br>",
            unsafe_allow_html=True
        )

###################################################

st.subheader("Etude de temp√©ratures mensuelles")
mois_dict = {
    1: "Janvier", 2: "F√©vrier", 3: "Mars", 4: "Avril",
    5: "Mai", 6: "Juin", 7: "Juillet", 8: "Ao√ªt",
    9: "Septembre", 10: "Octobre", 11: "Novembre", 12: "D√©cembre"
}

col1, col2,col3 = st.columns([1,2,2],vertical_alignment="top")

with col1:
    ann√©e_selectionn√©e = st.selectbox("S√©lectionnez une ann√©e", sorted(df["ann√©e"].unique(), reverse=True))

    stations_disponibles = df[df["ann√©e"] == ann√©e_selectionn√©e]["nom_usuel"].unique()

    if len(stations_disponibles) > 1:
        station_selectionn√©e = st.selectbox("S√©lectionnez une station m√©t√©o", stations_disponibles)
    else:
        station_selectionn√©e = stations_disponibles[0]
        st.write(f"üìç Station s√©lectionn√©e automatiquement : **{station_selectionn√©e}**")

    df_station = df[df["nom_usuel"] == station_selectionn√©e]

    mois_options = {mois_dict[m]: m for m in sorted(df_station["mois"].unique())}

    mois_selectionn√©_nom = st.selectbox("S√©lectionnez un mois", list(mois_options.keys()))
    mois_selectionn√© = mois_options[mois_selectionn√©_nom]

df_filtr√© = df_station[(df_station["ann√©e"] == ann√©e_selectionn√©e) & (df_station["mois"] == mois_selectionn√©)]

# on fait 4 cat√©gorie de temp√©rature
df_filtr√©["Cat√©gorie Temp√©rature"] = pd.cut(
    df_filtr√©["Moyenne entre la temp√©rature min et max"],
    bins=[-float("inf"), 5, 15, 25, float("inf")],
    labels=["< 5¬∞C", "5-15¬∞C", "15-25¬∞C", "> 25¬∞C"]
)

df_pie = df_filtr√©["Cat√©gorie Temp√©rature"].value_counts().reset_index()
df_pie.columns = ["Cat√©gorie Temp√©rature", "Nombre de jours"]

# couleur pour les 4 cat√©gorie: bleu vert jaune rouge
color_map = {
    "< 5¬∞C": "#3498db",
    "5-15¬∞C": "#2ecc71",
    "15-25¬∞C": "#f1c40f",
    "> 25¬∞C": "#e74c3c"
}



with col3:
    moyenne_selectionn√©e = df_filtr√©["Moyenne entre la temp√©rature min et max"].mean()

    moyenne_autres_annees = df[df["mois"] == mois_selectionn√©]["Moyenne entre la temp√©rature min et max"].mean()
    variation = moyenne_selectionn√©e - moyenne_autres_annees
    st.metric(
        label=f"Moyenne de temp√©rature ({mois_selectionn√©_nom} {ann√©e_selectionn√©e})",
        value=f"{moyenne_selectionn√©e:.2f}¬∞C",
        delta=f"{variation:.2f}¬∞C",
        delta_color="inverse" if variation < 0 else "normal",
    )
    with st.expander("Infos"):
        st.write('''
            En s√©lectionnant le mois de l'ann√©e d'int√©r√™t, cette m√©trique indique la temp√©rature moyenne du mois ainsi que l'√©cart de temp√©rature avec la moyenne du m√™me mois de toutes les autres ann√©es.  
            Cela vous indiquera si ce mois a √©t√© plus chaud ou plus froid que les m√™mes mois des autres ann√©es.
            ''')
    df_moyennes_mois = df[df["mois"] == mois_selectionn√©].groupby("ann√©e")["Moyenne entre la temp√©rature min et max"].mean().reset_index()



with col2:
    fig = px.pie(
        df_pie, 
        values="Nombre de jours", 
        names="Cat√©gorie Temp√©rature", 
        title=f"üå° R√©partition des temp√©ratures en {mois_selectionn√©_nom} {ann√©e_selectionn√©e} √† {station_selectionn√©e}",
        color="Cat√©gorie Temp√©rature",
        color_discrete_map=color_map
    )
    st.plotly_chart(fig)
    st.markdown(
            "<p style='text-align: left; color: gray; margin-top: -40px;'>"
            "Source : Donn√©es climatologique de base quotidiennes M√©t√©o France</p><br><br>",
            unsafe_allow_html=True
        )

col11, col21 = st.columns([2,3],vertical_alignment="center")

with col11 : 
    fig = px.line(
        df_moyennes_mois, 
        x="ann√©e", 
        y="Moyenne entre la temp√©rature min et max", 
        markers=True,
        title=f"üìà Temp√©ratures moyennes en {mois_selectionn√©_nom} (toutes ann√©es)",
        labels={"Moyenne entre la temp√©rature min et max": "Temp√©rature moyenne (¬∞C)", "ann√©e": "Ann√©e"},
        line_shape="linear",
        range_y=[-10, 35]
    )

    st.plotly_chart(fig)
    st.markdown(
            "<p style='text-align: left; color: gray; margin-top: -40px;'>"
            "Source : Donn√©es climatologique de base quotidiennes M√©t√©o France</p><br><br>",
            unsafe_allow_html=True
        )


st.link_button("Source M√©t√©o France", "https://meteo.data.gouv.fr/form")


#############################################################



