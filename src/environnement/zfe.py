import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px


@st.cache_data
def load_data_full():
    file_path_full_data = "../data/environnement/devdurable/Donnees-sur-le-parc-de-vehicule-au-niveau-communal.2023-05.csv"
    df_full = pd.read_csv(file_path_full_data,sep = ";",skiprows=1)
    return(df_full)

df_full= load_data_full()



st.title("Etude des ZFE")
multi = '''
    Voitures :red[Crit‚ÄôAir 5] et non class√©s : interdits depuis juillet 2023  
    V√©hicules :orange[Crit‚ÄôAir 4] : interdits depuis le 1er janvier 2024  
    V√©hicule utilitaire l√©ger et poids lourd :green[Crit‚ÄôAir 3] : interdits depuis le 1er juillet 2023  

    Ces restrictions s‚Äôappliquent du lundi au vendredi, de 7h √† 19h, hors week-ends et jours f√©ri√©s.  

    Pour les prochaines √©tapes, le calendrier pr√©visionnel pr√©voit une interdiction au 1er janvier 2025 pour les v√©hicules :green[Crit Air 3].  
    La m√©tropole de Grenoble envisage √©galement d‚Äôinterdire les v√©hicules :blue[Crit‚ÄôAir 2] avant 2030, en anticipation de la fin des ventes de v√©hicules thermiques annonc√©e pour 2035.
    '''
st.subheader("Dans la Zone √† Faibles √âmissions (ZFE) de Grenoble Alpes M√©tropole, les restrictions de circulation s‚Äôappliquent aux v√©hicules suivants en fonction de leur vignette Crit‚ÄôAir :")  
st.markdown(multi)

with st.expander("Infos"):
        st.write('''
            Au 1er janvier 2022, le parc de v√©hicules en circulation se compose de 38,7 millions de voitures particuli√®res, 
            6,3 millions de v√©hicules utilitaires l√©gers, 616 000 poids lourds et 95 000 autobus et autocars. 
            Le SDES met √† disposition des statistiques par genre de v√©hicule (voitures particuli√®res, v√©hicules utilitaires l√©gers, 
            poids lourds, autobus et autocars) ; par localisation (r√©gion, d√©partement, commune) ; selon les caract√©ristiques 
            techniques du v√©hicule (motorisation, √¢ge, vignette Crit‚ÄôAir, poids total autoris√© en charge ‚Äî PTAC) et les 
            caract√©ristiques de l‚Äôutilisateur (m√©nages, entreprises, administrations, et secteurs d‚Äôactivit√©).
            ''')

codes_insee = [ # Pour limiter sur la m√©tropole
    "38057", "38059", "38071", "38068", "38111", "38126", "38150", "38151", 
    "38158", "38169", "38170", "38179", "38185", "38188", "38200", "38516", 
    "38187", "38317", "38471", "38229", "38235", "38258", "38252", "38271", 
    "38277", "38279", "38281", "38309", "38325", "38328", "38364", "38382", 
    "38388", "38421", "38423", "38436", "38445", "38472", "38474", "38478", 
    "38485", "38486", "38524", "38528", "38529", "38533", "38540", "38545", 
    "38562"
]

codes_insee = list(map(str, codes_insee)) 


# üìÇ Charger les donn√©es (assure-toi que df_full est bien d√©fini)
df_metroGRE = df_full[df_full["COMMUNE_CODE"].isin(codes_insee)]

# üìä S√©lection des colonnes utiles (ann√©es du parc automobile)
colonnes_annees = ["PARC_2011", "PARC_2012", "PARC_2013", "PARC_2014", "PARC_2015", 
                   "PARC_2016", "PARC_2017", "PARC_2018", "PARC_2019", "PARC_2020", 
                   "PARC_2021", "PARC_2022"]

# üîÑ Transformer les donn√©es en format long (melt)
df_melted = df_metroGRE.melt(
    id_vars=["COMMUNE_CODE", "COMMUNE_LIBELLE", "CATEGORIE_VEHICULE", "CRITAIR"],  
    value_vars=colonnes_annees, 
    var_name="Ann√©e", 
    value_name="Nombre de v√©hicules"
)

# üî¢ Convertir Ann√©e pour un affichage propre
df_melted["Ann√©e"] = df_melted["Ann√©e"].str.extract(r"(\d{4})").astype(int)

col1, col2  = st.columns([1,3],vertical_alignment="center")

with col1 :
    # üéõÔ∏è S√©lecteur Streamlit pour choisir la commune et le Crit'Air
    ville_selectionnee = st.selectbox("S√©lectionnez une ville :", sorted(df_melted["COMMUNE_LIBELLE"].unique()))
    critair_selectionne = st.selectbox("S√©lectionnez un Crit'Air :", sorted(df_melted["CRITAIR"].dropna().unique()))

# üìå Filtrer les donn√©es selon la s√©lection
df_filtr√© = df_melted[
    (df_melted["COMMUNE_LIBELLE"] == ville_selectionnee) & 
    (df_melted["CRITAIR"] == critair_selectionne)
]

# üìä Calcul du pourcentage d'√©volution (2011 ‚Üí 2022)
df_evolution = df_filtr√©.groupby("Ann√©e")["Nombre de v√©hicules"].sum()
val_2011 = df_evolution.get(2011, 0)
val_2022 = df_evolution.get(2022, 0)

if val_2011 > 0:  
    evolution_pourcentage = ((val_2022 - val_2011) / val_2011) * 100
else:
    evolution_pourcentage = None

with col2 :
    # üìä Tracer le bar chart empil√© par cat√©gorie de v√©hicule
    fig = px.bar(
        df_filtr√©, 
        x="Ann√©e", 
        y="Nombre de v√©hicules",  
        color="CATEGORIE_VEHICULE",  
        barmode="stack",  
        title=f"√âvolution du parc {critair_selectionne} √† {ville_selectionnee} par cat√©gorie de v√©hicule"
    )

    # üìà Afficher le graphique
    st.plotly_chart(fig)

    st.markdown(
            "<p style='text-align: left; color: gray; margin-top: -40px;'>"
            "Source : Donn√©es sur le parc de v√©hicules au niveau communal SDES</p><br><br>",
            unsafe_allow_html=True
        )

with col1 :
        # üìâ Affichage du pourcentage d'√©volution
    if evolution_pourcentage is not None:
        st.metric(
            label=f"√âvolution 2011 ‚Üí 2022 ({critair_selectionne} √† {ville_selectionnee})",
            value=f"{evolution_pourcentage:.2f} %",
            delta=f"{val_2022 - val_2011} v√©hicules"
        )
    else:
        st.write("Pas de donn√©es disponibles pour calculer l'√©volution.")

##################################################################################

df_grouped = df_melted[df_melted["CRITAIR"] == critair_selectionne].groupby(["Ann√©e", "COMMUNE_LIBELLE"], as_index=False)["Nombre de v√©hicules"].sum()

fig = px.line(
    df_grouped, 
    x="Ann√©e", 
    y="Nombre de v√©hicules",  
    color="COMMUNE_LIBELLE",   
    title=f"√âvolution du parc {critair_selectionne}",
    markers=True
)

fig.update_layout(
    xaxis=dict(
        tickmode="linear",
        dtick=1  
    ),
    yaxis_title="Nombre de v√©hicules"
)
st.plotly_chart(fig)

st.markdown(
            "<p style='text-align: left; color: gray; margin-top: -40px;'>"
            "Source : Donn√©es sur le parc de v√©hicules au niveau communal SDES</p><br><br>",
            unsafe_allow_html=True
)


df_group_critair = df_melted.groupby(["CRITAIR","Ann√©e"]).sum(numeric_only = True).reset_index()

kiwi = px.line(
    df_group_critair, 
    x="Ann√©e", 
    y="Nombre de v√©hicules",  
    color="CRITAIR",   
    title=f"√âvolution du parc automobile par vignette Crit'Air",
    markers=True
)

kiwi.update_layout(
    xaxis=dict(
        tickmode="linear",
        dtick=1  
    ),
    yaxis_title="Nombre de v√©hicules"
)
st.plotly_chart(kiwi)

st.markdown(
            "<p style='text-align: left; color: gray; margin-top: -40px;'>"
            "Source : Donn√©es sur le parc de v√©hicules au niveau communal SDES</p><br><br>",
            unsafe_allow_html=True
)


###############################################################################


        
st.link_button("Source SDES", "https://www.statistiques.developpement-durable.gouv.fr/catalogue?page=dataset&datasetId=64511438f3196b5b550dd093")

    ############################################""

